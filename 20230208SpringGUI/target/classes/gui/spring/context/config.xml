<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context
	                    http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/aop
	                    http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 이 어플리케이션에서 사용될 모든 객체들의 명단을 적자 -->
	<!-- 여기에 적어놓으면 스프링이 알아서 인스턴스를 생성하고 관리해준다. 또, 필요한 곳에 주입(injection)까지 해준다 -->

	<bean id="fripan" class="gui.cook.Fripan" />
	<bean id="electPan" class="gui.cook.ElectPan" />
	<bean id="cook" class="gui.cook.Cook" />

	<!-- 회원가입에 필요한 컴포넌트 Bean들을 등록하자 -->
	<!-- 받는 쪽은 유연하지만 스프링에는 정확한 자료형을 적어줘야 함 -->
	<bean id="id" class="javax.swing.JTextField">
		<constructor-arg type="int" value="20" />
		<!-- new JTextField(20) -->
	</bean>
	<bean id="name" class="javax.swing.JTextField">
		<constructor-arg type="int" value="20" />
		<!-- new JTextField(20) -->
	</bean>
	<bean id="email" class="javax.swing.JTextField">
		<constructor-arg type="int" value="20" />
		<!-- new JTextField(20) -->
	</bean>
	<bean id="regist" class="javax.swing.JButton">
		<constructor-arg type="String" value="등록" />
		<!-- new JTextField(20) -->
	</bean>
	<bean id="flow" class="java.awt.FlowLayout" />

	<!-- JoinForm이 필요로 하는 빈들을 주입시키기(엮기 weaving) -->
	<bean id="joinForm" class="gui.view.JoinForm">
		<property name="t_id" ref="id" />
		<property name="t_name" ref="name" />
		<property name="t_email" ref="email" />
		<property name="bt_regist" ref="regist" />
		<property name="flowLayout" ref="flow" />
	</bean>

	<!-- 학생등록 -->
	<bean id="schoolBell" class="gui.school.SchoolBell" />
	<bean id="student" class="gui.school.Student" />
	<!-- <constructor-arg name="bell" ref="schoolBell" /> -->

	<!-- AOP 적용하기 -->
	<!-- 1) 공통 로직을 advisor로 둔다(Bean으로 등록) 2) 공통 로직을 어느 시점, 어느 지점에 동작시킬지 논리를 
		작성, 즉 관점을 등록한다 -->
		<!-- Aop 설정 -->
	<aop:config>
		<!-- 어떤 공통 코드를 적용할 지 그 객체의 레퍼런스(ref) 명시 -->
		<aop:aspect ref="schoolBell">
			<!-- <aop:pointcut expression="학생의 모든 메서드에서" id=""/> -->
			<!-- 어떤 지점(메서드)pointcut에서 공통코드가 동작할지 서술(expression) -->
			<aop:pointcut id="bellPointCut" expression="execution(public * gui.school.Student.*(..))" />
			<!-- 어느 시점(before)에 공통코드가 동작할지 before : 전-->
			<aop:before method="ring" pointcut-ref="bellPointCut"/>
		</aop:aspect>
	</aop:config>
</beans>
