<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 
	스프링 트랜잭션 등의 도움을 받기 위해서는 스프링이 DB커넥션을 취득해야 한다
	따라서, 스프링에서 JNDI를 검색하여 커넥션을 보유하자
	 -->
	
	<jee:jndi-lookup 
	id="dataSource"
	jndi-name="jdbc/oracle"
	resource-ref="true"	/> <!-- 커넥션 취득 -->
	
	<!-- 기술에 따른 트랜잭션 매니저 선택 -->
	<!-- 
		JDBC			- DataSourceTransactionManager
		Mybatis		- DataSourceTransactionManager
		Hibernate	- HibernateTransactionManager
	 -->
	 
	 <bean 
	 	id="transactionManager" 
	 	class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
	 	p:dataSource-ref="dataSource"/>  <!-- 여기에서의 dataSource는 위에 있는 dataSource를 넣는거임 -->
		
	<!-- SqlSessionTemplate을 얻기 위한 SqlSessionBean 등록 -->
	<!-- 
		원래 Mybatis가 취득했던 커넥션을 스프링이 가져왔기 때문에 
		dataSource-ref로 DB정보를 org.mybatis.spring.SqlSessionFactoryBean에넣어주자
	-->
	
	<!-- DB 연동 기술 중 Mybatis-Spring이 지원하는 Mybatis 사용을 위한 설정 -->
	<bean 
		id="sqlSessionFactoryBean" 
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classPath:com/edu/springboard/mybatis/config.xml"
		/> <!-- 설정파일은 객체가 아니므로 ref가 아닌 p:configLocation -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
	</bean>
	
	<!-- DB 연동 기술 중 Spring이 지원하는 Jdbc 사용을 위한 설정 -->
	<bean 
		id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource"/>

	<context:component-scan base-package="com.edu.springboard.model"/>
	
	<!-- 트랜잭션을 적용하는 방법 두 가지 -->
	<!--
	  1) xml에서 적용하는 방식 : 선언적 방식 - 일괄 적용시 유리
	  
	  2) Java코드에서 어노테이션을 이용하는 방법 - 개별 적용
	  -->
	<aop:config>
        <!-- 트랜잭션을 어떠한 메서드들에 적용할지 패턴을 명시 *-->
        <aop:pointcut expression="execution(public * com.edu.springboard.model..*Impl.*(..))" id="txcut"/>
        <aop:advisor advice-ref="txAdviser" pointcut-ref="txcut"/>
    </aop:config>

    <tx:advice id="txAdviser" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="update" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

</beans>
